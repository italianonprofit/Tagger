<?php
/**
 * Update a Tag
 * 
 * @package tagger
 * @subpackage processors
 */

class TaggerTagUpdateProcessor extends modObjectUpdateProcessor {
    public $classKey = 'TaggerTag';
    public $languageTopics = array('tagger:default');
    public $objectType = 'tagger.tag';
    /** @var TaggerTag $object */
    public $object;

    public function beforeSave() {
        $name = $this->getProperty('tag');
        $group = $this->getProperty('group');
        $alias = $this->getProperty('alias');
        $parent = $this->getProperty('parent',null);
        $searchable_by = $this->getProperty('searchable_by',null);
        if(!empty($searchable_by)) $this->object->set('searchable_by',json_encode($searchable_by));
        else{
            $this->object->set('searchable_by',null);
        }
        if(empty(trim($parent))) $this->object->set('parent',null,null);

        if (empty($name) || empty($group)) {
            if (empty($group)) {
                $this->addFieldError('group',$this->modx->lexicon('tagger.err.group_name_ns'));
            }

            if (empty($name)) {
                $this->addFieldError('tag',$this->modx->lexicon('tagger.err.tag_name_ns'));
            }
        } else {
            if ($this->object->group != $group) {
                $this->addFieldError('group',$this->modx->lexicon('tagger.err.tag_group_changed'));
            }

            if ($this->modx->getCount($this->classKey, array('tag' => $name, 'group' => $group, 'id:!=' => $this->object->id)) > 0) {
                $this->addFieldError('tag',$this->modx->lexicon('tagger.err.tag_name_ae'));
            }
        }

        if (!empty($alias)) {
            $alias = $this->object->cleanAlias($alias);
            if ($this->modx->getCount($this->classKey, array('alias' => $alias, 'group' => $group, 'id:!=' => $this->object->id)) > 0) {
                $this->addFieldError('alias',$this->modx->lexicon('tagger.err.tag_alias_ae'));
            } else {
                $this->object->set('alias', $alias);
            }
        }

        return parent::beforeSave();
    }

    /**
     * @return bool
     * Verifico se è impostato un parent
     * Copio le risorse assegnate
     *
     */
    public function afterSave()
    {
        //$this->cleanTagResource();
        $parent = $this->getProperty('parent');
        if(empty($parent)) return parent::afterSave();
        $parentTag = $this->modx->getObject('TaggerTag',$parent);
        if(!($parentTag instanceof TaggerTag)) parent::afterSave();

        $taggerTagResources = $this->modx->getCollection('TaggerTagResource',array(
            'tag'=>$parentTag->id
        ));
        if(empty($taggerTagResources)) return parent::afterSave();

        foreach($taggerTagResources as $tagRes){
            $alreadyExist = $this->modx->getObject('TaggerTagResource',array(
                'tag'=>$this->object->get('id'),
                'classKey'=>$tagRes->classKey,
                'resource'=>$tagRes->resource,
            ));
            if(!($alreadyExist instanceof TaggerTagResource)){
                $alreadyExist = $this->modx->newObject('TaggerTagResource');
                $alreadyExist->fromArray(array(
                    'tag'=>$this->object->get('id'),
                    'classKey'=>$tagRes->classKey,
                    'resource'=>$tagRes->resource,
                ),'',true);
                $alreadyExist->save();
            }

        }
        $this->updateIndex();

        return parent::afterSave(); // TODO: Change the autogenerated stub
    }

    private function cleanTagResource(){

        $taggerTagResources = $this->modx->getCollection('TaggerTagResource',array(
            'tag'=>$this->object->id
        ));
        foreach($taggerTagResources as $tagRes){
            $tagRes->remove();
        }

        return true;
    }


    private function updateIndex(){

        // prelevo TaggerGroup
        $tagGroup = $this->modx->getObject('TaggerGroup',$this->object->get('group'));

        $uri = $this->cleanAlias($tagGroup->name)."-".$this->cleanAlias($this->object->get('tag'))."/";
        // Verifico se esiste già una relazione SearchIndex <-> TaggerTag per il tag
        // altrimenti creo il SearchIndex e SearchIndexTag
        $c = $this->modx->newQuery('SearchIndexTag');
        $c->where(array(
            'SearchIndexTag.tag_id:='=>$this->object->get('id'),
        ));
        $alreadyExist = $this->modx->getObject('SearchIndexTag',$c);
        if($alreadyExist){
            // recupero indice id
            $obj = $this->modx->getObject('SearchIndex',$alreadyExist->index_id);
            if($obj->uri != $this->cleanAlias($this->object->get('alias'))){
                $obj->set('uri',$uri);
                $obj->set('updated_at',date('Y-m-d H:i:s'));
                $obj->save();
            }
        }else{
            $obj = $this->modx->newObject('SearchIndex',array(
                'name'=>$this->object->get('tag'),
                'uri'=>$uri,
                'type'=>'tag',
                'created_at'=>date('Y-m-d H:i:s'),
                'updated_at'=>date('Y-m-d H:i:s'),
            ));
            $obj->save();
        }


        // Creo relazione Indice <-> Tag
        $alreadyExistIndexTag = $this->modx->getObject('SearchIndexTag',array(
            'index_id:='=>$obj->get('id'),
            'tag_id:='=>$this->object->get('id'),
        ));
        if($alreadyExistIndexTag){
            $SearchIndexTag = $alreadyExistIndexTag;
        }else{
            $SearchIndexTag = $this->modx->newObject('SearchIndexTag',array(
                'index_id'=>$obj->get('id'),
                'tag_id'=>$this->object->get('id'),
                'created_at'=>date('Y-m-d H:i:s'),
                'updated_at'=>date('Y-m-d H:i:s'),
            ));
            $SearchIndexTag->save();
        }

        // Creo Widget del tag
        if($tagGroup instanceof TaggerGroup){

            $widget = $this->modx->getObject('SearchWidget',array(
                'name:='=>$tagGroup->name,
                'OR:alias:='=>$tagGroup->alias
            ));
            if(!($widget)){
                $widget = $this->modx->newObject('SearchWidget',array(
                    'name'=>$tagGroup->name,
                    'alias'=>$tagGroup->alias,
                    'type'=>'menu',
                    'created_at'=>date('Y-m-d H:i:s'),
                    'updated_at'=>date('Y-m-d H:i:s'),
                ));
                $widget->save();
            }


            // Creo WidgetIndex
            $widgetIndex = $this->modx->getObject('SearchWidgetIndex',array(
                'index_id'=>$obj->get('id'),
                'widget_id'=>$widget->get('id')
            ));
            if(!($widgetIndex instanceof SearchWidgetIndex)){
                $widgetIndex = $this->modx->newObject('SearchWidgetIndex',array(
                    'index_id'=>$obj->get('id'),
                    'widget_id'=>$widget->get('id'),
                    'created_at'=>date('Y-m-d H:i:s'),
                    'updated_at'=>date('Y-m-d H:i:s'),
                ));
                $widgetIndex->save();
            }
        }

        return true;
    }


    private function cleanAlias($name) {
        $res = new modResource($this->modx);
        $name = str_replace('/', '-', $name);
        $name = iconv('UTF-8', 'ASCII//TRANSLIT', $name);

        return $res->cleanAlias($name);
    }
}
return 'TaggerTagUpdateProcessor';