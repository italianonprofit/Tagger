<?php
/**
 * Update From Grid a Group
 *
 * @package tagger
 * @subpackage processors
 */
require_once (dirname(__FILE__).'/update.class.php');

class TaggerGroupUpdateFromGridProcessor extends TaggerGroupUpdateProcessor {
    public function initialize() {
        $data = $this->getProperty('data');
        if (empty($data)) return $this->modx->lexicon('invalid_data');
        $data = $this->modx->fromJSON($data);
        if (empty($data)) return $this->modx->lexicon('invalid_data');
        $this->setProperties($data);
        $this->unsetProperty('data');

        return parent::initialize();
    }
    public function afterSave()
    {
        // Genero Alias htaccess
        $name = $this->object->cleanAlias($this->object->name);
        $filepath = MODX_BASE_PATH.".htaccess";
        $f = fopen($filepath, "r+");
        $oldstr = file_get_contents($filepath);
        $str_to_insert = "RewriteRule ^sfoglia/".$name."-([^/]*)\/$ /sfoglia/?".$this->object->alias."[]=$1 [L,QSA]\r";
        $specificLine = "#findme";


// read lines with fgets() until you have reached the right one
//insert the line and than write in the file.

        $alreadyInsert = false;
        while (($buffer = fgets($f)) !== false) {
            if (strpos($buffer, $str_to_insert) !== false) {
                $alreadyInsert = true;
            }
        }
        if(!$alreadyInsert){
            //echo "inserisco...";
            rewind($f);
            while (($buffer = fgets($f)) !== false) {
                if (strpos($buffer, $specificLine) !== false) {
                    //echo "found";
                    $pos = ftell($f);
                    $newstr = substr_replace($oldstr, $str_to_insert, $pos, 0);
                    file_put_contents(MODX_BASE_PATH.".htaccess", $newstr);
                    break;
                }
            }
        }
        fclose($f);
        return parent::afterSave(); // TODO: Change the autogenerated stub
    }

}
return 'TaggerGroupUpdateFromGridProcessor';